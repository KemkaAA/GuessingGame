import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class WordGuessingGame {

    private static final int MAX_ATTEMPTS = 6;

    private static final List<String> MOTIVATIONAL_MESSAGES = new ArrayList<>();

    static {
        MOTIVATIONAL_MESSAGES.add("Your almost there…");
        MOTIVATIONAL_MESSAGES.add("Feeling challenged yet?");
        MOTIVATIONAL_MESSAGES.add("Remember, victory is achieved through adversity.");
        MOTIVATIONAL_MESSAGES.add("I hope you're ready.");
        MOTIVATIONAL_MESSAGES.add("Will you end here?");
        MOTIVATIONAL_MESSAGES.add("You struggled with that last word, didn’t you?");
        MOTIVATIONAL_MESSAGES.add("Not giving up yet?");
        MOTIVATIONAL_MESSAGES.add("The last level is nearly impossible…");
        MOTIVATIONAL_MESSAGES.add("Never back down, never give up!");
        MOTIVATIONAL_MESSAGES.add("Will your efforts pay off?");
        MOTIVATIONAL_MESSAGES.add("It only gets harder from here.");
    }

    public static void main(String[] args) {
        boolean restartGame = true;
        JOptionPane.showMessageDialog(null, "Welcome to Ultimate Word Guesser!");
        JOptionPane.showMessageDialog(null, "In this game, you will have to figure out random words to win");
        JOptionPane.showMessageDialog(null, "There will be 4 levels of difficulty: Easy, Medium, Hard, Expert");
        JOptionPane.showMessageDialog(null, "For each level you will have 6 lives");
        JOptionPane.showMessageDialog(null, "Will you be able to conquer all 4?");

        while (restartGame) {
            int currentLevel = 1;
            restartGame = playGame(currentLevel);

            if (restartGame) {
                int choice = JOptionPane.showConfirmDialog(null, "Do you want to try again from the beginning?", "Try Again?", JOptionPane.YES_NO_OPTION);
                if (choice != JOptionPane.YES_OPTION) {
                    restartGame = false;
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Thanks for playing!");
    }

    private static boolean playGame(int currentLevel) {
        while (currentLevel <= 4) {
            boolean levelResult = playLevel(currentLevel);
            if (!levelResult) {
                int choice = JOptionPane.showConfirmDialog(null, "Do you want to try again from the beginning?", "Try Again?", JOptionPane.YES_NO_OPTION);
                if (choice != JOptionPane.YES_OPTION) {
                    return false; // Player lost, and chose not to restart from the beginning
                }
                currentLevel = 1; // Restart from the beginning
            } else {
                currentLevel++; // Move to the next level
                displayRandomMotivationalMessage(); // Display a random motivational message
            }
        }
        JOptionPane.showMessageDialog(null, "Congratulations! You've done the impossible,\ncompleted all levels and won the game!");
        JOptionPane.showMessageDialog(null, "But this is not the end.\nThere are over 100 random words can you beat the game again?");
        return true; // Player completed all levels
    }

    private static boolean playLevel(int difficultyLevel) {
        String wordToGuess = chooseWord(difficultyLevel);
        char[] guessedLetters = new char[wordToGuess.length()];
        int attemptsLeft = MAX_ATTEMPTS;
        int incorrectAttempts = 0;

        JOptionPane.showMessageDialog(null, "Difficulty: " + getDifficultyName(difficultyLevel) + "\nLevel " + difficultyLevel);
        initializeGuessedLetters(guessedLetters);

        while (attemptsLeft > 0) {
            char guess = getValidGuess();

            if (isAlreadyGuessed(guess, guessedLetters)) {
                JOptionPane.showMessageDialog(null, "You've already guessed that letter. Try again.");
                continue;
            }

            updateGuessedLetters(guess, wordToGuess, guessedLetters);

            if (!containsGuess(guess, wordToGuess)) {
                attemptsLeft--;
                incorrectAttempts++;
                JOptionPane.showMessageDialog(null, "Wrong guess! Lives left: " + attemptsLeft);
            } else {
                JOptionPane.showMessageDialog(null, "Good guess!");
            }

            displayHangman(incorrectAttempts);
            displayCurrentStatus(guessedLetters, attemptsLeft);

            if (isWordGuessed(guessedLetters)) {
                JOptionPane.showMessageDialog(null, "Congratulations! You've guessed the word.");
                return true; // Player won the level
            }
        }

        JOptionPane.showMessageDialog(null, "Game Over! You ran out of lives. The word was: " + wordToGuess);
        return false; // Player lost the level
    }

    private static void displayRandomMotivationalMessage() {
        Collections.shuffle(MOTIVATIONAL_MESSAGES);
        JOptionPane.showMessageDialog(null, MOTIVATIONAL_MESSAGES.get(0));
    }

    private static String getDifficultyName(int difficultyLevel) {
        switch (difficultyLevel) {
            case 1:
                return "Easy";
            case 2:
                return "Medium";
            case 3:
                return "Hard";
            case 4:
                return "Expert";
            default:
                throw new IllegalArgumentException("Invalid difficulty level");
        }
    }

    private static String chooseWord(int difficultyLevel) {
        String fileName;

        switch (difficultyLevel) {
            case 1:
                fileName = "easywords.txt";
                break;
            case 2:
                fileName = "mediumwords.txt";
                break;
            case 3:
                fileName = "hardwords.txt";
                break;
            case 4:
                fileName = "expertwords.txt";
                break;
            default:
                throw new IllegalArgumentException("Invalid difficulty level");
        }

        return getRandomWordFromFile(fileName);
    }

    private static String getRandomWordFromFile(String fileName) {
        String[] words = readWordsFromFile(fileName);
        return words[(int) (Math.random() * words.length)];
    }

    private static String[] readWordsFromFile(String fileName) {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            List<String> wordsList = new ArrayList<>();
            String line;

            while ((line = reader.readLine()) != null) {
                wordsList.add(line.trim());
            }

            return wordsList.toArray(new String[0]);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading words from file: " + fileName);
            System.exit(1);
            return null; // Unreachable, but added to satisfy compiler
        }
    }

    private static void initializeGuessedLetters(char[] guessedLetters) {
        for (int i = 0; i < guessedLetters.length; i++) {
            guessedLetters[i] = '_';
            
        }
    }

    private static void displayHangman(int incorrectAttempts) {
        // ASCII art representation of Hangman Harry
        switch (incorrectAttempts) {
            case 0:
                JOptionPane.showMessageDialog(null, "Hangman Harry:\n\n"
                        + "  O\n"
                        + "  /|\\\n"
                        + "  / \\\n");
                break;
            case 1:
                JOptionPane.showMessageDialog(null, "Hangman Harry:\n\n"
                        + "  O\n"
                        + "  /|\\\n"
                        + "  /\n");
                break;
            case 2:
                JOptionPane.showMessageDialog(null, "Hangman Harry:\n\n"
                        + "  O\n"
                        + "  /|\\\n");
                break;
            case 3:
                JOptionPane.showMessageDialog(null, "Hangman Harry:\n\n"
                        + "  O\n"
                        + "  /|");
                break;
            case 4:
                JOptionPane.showMessageDialog(null, "Hangman Harry:\n\n"
                        + "  O\n"
                        + "  /");
                break;
            case 5:
                JOptionPane.showMessageDialog(null, "Hangman Harry:\n\n"
                        + "  O");
                break;
            default:
                break;
        }
    }

    private static void displayCurrentStatus(char[] guessedLetters, int attemptsLeft) {
        StringBuilder display = new StringBuilder("Current Status: ");
        for (char letter : guessedLetters) {
            display.append(letter).append(" ");
        }
        display.append("\nLives left: ").append(attemptsLeft);
        JOptionPane.showMessageDialog(null, display.toString());
    }

    private static char getValidGuess() {
        char guess;
        while (true) {
            String input = JOptionPane.showInputDialog("Guess a letter: ").toLowerCase();
            if (input.length() == 1 && Character.isLetter(input.charAt(0))) {
                guess = input.charAt(0);
                break;
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a single alphabetic character.");
            }
        }
        return guess;
    }

    private static boolean isAlreadyGuessed(char guess, char[] guessedLetters) {
        for (char letter : guessedLetters) {
            if (letter == guess) {
                return true;
            }
        }
        return false;
    }

    private static void updateGuessedLetters(char guess, String wordToGuess, char[] guessedLetters) {
        for (int i = 0; i < wordToGuess.length(); i++) {
            if (wordToGuess.charAt(i) == guess) {
                guessedLetters[i] = guess;
            }
        }
    }

    private static boolean containsGuess(char guess, String wordToGuess) {
        return wordToGuess.indexOf(guess) != -1;
    }

    private static boolean isWordGuessed(char[] guessedLetters) {
        for (char letter : guessedLetters) {
            if (letter == '_') {
                return false;
            }
        }
        return true;
    }
}
